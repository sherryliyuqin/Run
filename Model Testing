library(caret)
library(bst)
library(plyr)
library(h2o)

pokemonname = "Pikachu"  

pokemon <- read.csv("pokemon.csv")
combat <- read.csv("combats.csv")
combat1 <- combat[,-c(1,2,3,4,7)]

names(combat1)[1] <- "Type_1"
names(combat1)[2] <- "Type_2"
combat1 <- combat1[,c(3,1,4:9,2,10:15)]
names(combat1)[1] <- "y"

type <- pokemon[pokemon$Name == pokemonname,4]
combat_1 <- combat1[combat1$Type_2 == type,]
combat_2 <- combat1[combat1$Type_1 == type,]
combat_2 <- combat_2[,c(1,9:15,2:8)]

for (i in 1:nrow(combat_2)){
  ifelse(combat_2[i,1] == 1,combat_2[i,1] <- 0, combat_2[i,1] <-1)
}

combat2 <-rbind(combat_1,combat_2)


dummies <- dummyVars(y ~ ., data = combat2)           
ex <- data.frame(predict(dummies, newdata = combat2)) 
combat2 <- cbind(combat2$y, ex)                             
names(combat2)[1] <- "y"                             
rm(dummies, ex) 

preProcValues <- preProcess(combat2[,2:ncol(combat2)], method = c("range"))
combat2 <- predict(preProcValues, combat2)
rm(preProcValues)

class(combat2$y) <- "Factor"
levels(combat2$y) <- make.names(levels(factor(combat2$y)))
levels(combat2$y)
class(combat2$y)

h2o.init(nthreads=12, max_mem_size="64g")
h2o.clusterInfo()

data <- as.h2o(combat2)

y <- "y"                               
x <- setdiff(names(data), y)            
parts <- h2o.splitFrame(data, 0.7, seed=99) 
train <- parts[[1]]              
test <- parts[[2]]    

rf <- h2o.randomForest(x, y, train)
h2o.performance(rf, train)
#MSE:  0.1256269
#RMSE:  0.3544388
#LogLoss:  0.393756
#Mean Per-Class Error:  0.1926191
#AUC:  0.9126254
#pr_auc:  0.9196937
#Gini:  0.8252509
#R^2:  0.496764

h2o.performance(rf, test)
#MSE:  0.2287823
#RMSE:  0.478312
#LogLoss:  0.6646593
#Mean Per-Class Error:  0.3625328
#AUC:  0.7019076
#pr_auc:  0.6980746
#Gini:  0.4038152
#R^2:  0.08482999


gbm <- h2o.gbm(x,y,train)
h2o.performance(gbm, train)
#MSE:  0.1889367
#RMSE:  0.4346685
#LogLoss:  0.5619543
#Mean Per-Class Error:  0.2748594
#AUC:  0.8121753
#pr_auc:  0.8073381
#Gini:  0.6243506
#R^2:  0.2431575

h2o.performance(gbm, test)
#MSE:  0.2218567
#RMSE:  0.4710167
#LogLoss:  0.6332909
#Mean Per-Class Error:  0.364894
#AUC:  0.6920544
#pr_auc:  0.6824811
#Gini:  0.3841087
#R^2:  0.1125337

dl <- h2o.deeplearning(x, y, train)
h2o.performance(dl, train)
#MSE:  0.2217923
#RMSE:  0.4709483
#LogLoss:  0.6378652
#Mean Per-Class Error:  0.3856905
#AUC:  0.7294342
#pr_auc:  0.7364616
#Gini:  0.4588685

h2o.performance(dl, test)
#MSE:  0.2804111
#RMSE:  0.5295385
#LogLoss:  0.7977107
#Mean Per-Class Error:  0.4687597
#AUC:  0.5734852
#pr_auc:  0.5546182
#Gini:  0.1469704

xgb <- h2o.xgboost(x, y, training_frame = train,
                   validation_frame = test,
                   stopping_rounds = 5,
                   ntrees =30,
                   gamma = 0.0)
h2o.performance(xgb,train)
#MSE:  0.1669015
#RMSE:  0.4085358
#LogLoss:  0.5084502
#Mean Per-Class Error:  0.2518254
#AUC:  0.8519279
#pr_auc:  0.8541541
#Gini:  0.7038558

h2o.performance(xgb,test)
#MSE:  0.2214337
#RMSE:  0.4705675
#LogLoss:  0.6327641
#Mean Per-Class Error:  0.3683164
#AUC:  0.6946656
#pr_auc:  0.6756943
#Gini:  0.3893312

summary(xgb)
#Variable Importances: 
#  variable relative_importance scaled_importance percentage
#1   Type1Speed          376.235931          1.000000   0.186869
#2 Type1Defense          266.069916          0.707189   0.132151
#3  Type1Attack          255.526260          0.679165   0.126915
#4      Type1HP          247.001480          0.656507   0.122681
#5  Type1Sp_Atk          246.056763          0.653996   0.122211


